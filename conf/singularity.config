def checkProfileSingularity(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See  for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###    The option '-profile singularity' requires the singularity images to be installed on your system. See  for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = true
  autoMounts = true
  runOptions = "${params.geniac.containers.singularityRunOptions}"
}

process {
  checkProfileSingularity("${params.geniac.singularityImagePath}")
  withLabel:onlyLinux { container = "${params.geniac.singularityImagePath}/onlylinux.simg" }
  withLabel:multiqc { container = "${params.geniac.singularityImagePath}/multiqc.simg" }
  withLabel:python { container = "${params.geniac.singularityImagePath}/python.simg" }
  withLabel:bowtie2 { conda = "${params.geniac.singularityImagePath}/bowtie2.simg" }
  withLabel:cutadapt { conda = "${params.geniac.singularityImagePath}/cutadapt.simg" }
  withLabel:samtools { conda = "${params.geniac.singularityImagePath}/samtools.simg" }
  withLabel:bedtools { conda = "${params.geniac.singularityImagePath}/bedtools.simg" }
  withLabel:deeptools { conda = "${params.geniac.singularityImagePath}/deeptools.simg" }
}
